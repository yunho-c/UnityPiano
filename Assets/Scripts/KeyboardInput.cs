//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Scripts/KeyboardInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/KeyboardInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @KeyboardInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @KeyboardInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardInput"",
    ""maps"": [
        {
            ""name"": ""2C"",
            ""id"": ""139d619e-574f-49ec-b127-8cd4b90a92de"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9a0bcd0c-e475-4dd8-a147-40cedaac973b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ac15f04-74fc-4c37-8f6d-5c40678975dc"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2Csharp"",
            ""id"": ""23533cb9-1d0a-42ce-8131-4a09ffa593c4"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""10e2576a-87fc-48cb-a120-2fd1b659e28f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9cd32f48-13e6-4d73-bb1c-1049f78267d9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2D"",
            ""id"": ""31b276ae-9fa1-4f07-97f7-dd9db8d5b198"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""a6be6306-f464-4743-a678-60979e4d56fd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""df7a98f0-7ce0-4ae8-84e2-8bfb9ab4f518"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2Dsharp"",
            ""id"": ""74bb3897-29d0-40f3-bbec-be19853af5cf"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""2669887f-b5cc-4fb7-9b6f-bd78bc61d274"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""39faee0d-2a14-486a-942d-39e9a8b5a848"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2E"",
            ""id"": ""19745ba2-8df7-4388-887b-ec856489b941"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""bceffed3-8c3d-456b-b7eb-8b13100d2349"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""284a4b6a-ba34-4597-ac5e-ee99204e3155"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2F"",
            ""id"": ""0dcf3f9a-3cb4-4345-94b2-d5aa92b8c842"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""2c83b616-0efe-484a-96bc-2f2fb0278959"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a38191a9-5883-4f3a-8955-434d785a45bc"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2Fsharp"",
            ""id"": ""e7551956-e622-4ede-a9b0-e120b0ebb13b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cf02d587-b779-432e-b4fa-c8fb6da07804"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e584bc0f-7d43-46e4-be78-06dee0a598c3"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2G"",
            ""id"": ""5f3489ce-abf3-4a7d-ad9a-c4e419590b8e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""8e65e082-c0a3-48d6-bf42-0d20239d679b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e7748ae-5116-42f7-b161-6c2263406fda"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2Gsharp"",
            ""id"": ""7981c38f-fc4c-4557-92a4-40aae1014505"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""115f7b23-a2d5-4b72-ac31-c23a8a219da5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84cf4e65-3b56-4073-bf9e-3b74712f7fbb"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2A"",
            ""id"": ""0a1923f6-9114-45a2-afe8-d4b90991bdae"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b47bf690-4eed-41cb-8282-edd1c39962f3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ba2dd38-a4d0-4bcc-a47a-112cd0c05085"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2Asharp"",
            ""id"": ""7f94dd21-9d39-4f4a-ac97-f751e61a6b32"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""3d0f19f7-bb6a-4819-b951-f5e466a34183"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c3e32ba6-2a9d-4df8-81fc-81a7ff05f96d"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2B"",
            ""id"": ""49af69e0-cf62-4c9d-b2c2-06e1acc6b27d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""17792a16-db31-4e12-b8e1-419321d4aafc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d3fd68c-e3c7-4500-87a5-2f79a2156786"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3C"",
            ""id"": ""6341794a-e1d5-4301-b5ba-77e4bd99f29b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b8ce455c-f1ee-4afe-9207-5324d3a8c485"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce8364ff-88c5-4fc4-b66d-87748ff335d0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3Csharp"",
            ""id"": ""85c80aca-2cdb-4aff-90b0-a4c5f8bd34c5"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""52f7309d-f97c-4af7-b206-dcec42fb617e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8127027a-ab2b-40d7-9167-17a40182b85d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3D"",
            ""id"": ""4664ad06-9d4c-4a00-a976-dc37b6d0826b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""b2777bee-bd26-4405-a5a8-19ed6cd4ba08"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1e07d62-4e29-4e56-8a7c-45fd6d34ddbb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3Dsharp"",
            ""id"": ""42632ad3-b3db-4720-a782-b0188b4dd0ff"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""aa3fe82b-a449-42a0-b4ad-0a024eabdae5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63d0048f-a616-47f9-b986-3d815b650c00"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3E"",
            ""id"": ""19b23b0b-b270-43ba-a34d-e663362e9b34"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""86defd72-47d4-42e3-adf6-f94ab8396228"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""15af7b60-fae7-4ac3-ac8b-869937ad359a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3F"",
            ""id"": ""2369a6cf-9744-47dc-adbd-11eb210a9b3f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""81e67d4f-8ecc-4fcd-8643-0a06a614db31"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2a56ee5-6b58-4ad6-900f-09f0a8d3110f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3Fsharp"",
            ""id"": ""be730ae3-a1e6-47a3-aff4-ec12a426a94e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""09411a82-4fc5-410a-a7e3-c62560029635"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f570251-b2a0-44c1-a332-ed4301852bb1"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3G"",
            ""id"": ""58d36e4b-5810-4c91-ba2a-92e1ab964eb0"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""a9312504-d048-4a0d-a5fb-6092f840f0ac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb9aa87d-0b84-4f85-8517-8f62b6ee1bce"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3Gsharp"",
            ""id"": ""6e9818d0-b66d-4713-8b40-9567e9a3c43f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""da5cfd10-2f83-4778-825d-61f0c6caf7db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""daca9793-4730-4203-a1a9-df22f1178ca4"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3A"",
            ""id"": ""87dee346-1f06-4e23-b840-9cbf2205ad4f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""4a1b9306-8464-44cb-a48c-523c85fabb6c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4fb1d7c7-33ca-4be2-a597-c2e76179abd6"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3Asharp"",
            ""id"": ""c59d28b0-f3be-44c9-aa2c-cd70c7be1515"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""82f549b6-f0bf-44ec-b8f8-f1976aadaacf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6306526-a15e-45df-809b-78b9a1b0bff4"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""3B"",
            ""id"": ""75246947-7720-43a3-bd78-3e4edab3836e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""02405d60-7a34-4dd3-9dab-7ad65d89dc54"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a856012-7303-40e8-8125-8d8cc09b1818"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // 2C
        m__2C = asset.FindActionMap("2C", throwIfNotFound: true);
        m__2C_Newaction = m__2C.FindAction("New action", throwIfNotFound: true);
        // 2Csharp
        m__2Csharp = asset.FindActionMap("2Csharp", throwIfNotFound: true);
        m__2Csharp_Newaction = m__2Csharp.FindAction("New action", throwIfNotFound: true);
        // 2D
        m__2D = asset.FindActionMap("2D", throwIfNotFound: true);
        m__2D_Newaction = m__2D.FindAction("New action", throwIfNotFound: true);
        // 2Dsharp
        m__2Dsharp = asset.FindActionMap("2Dsharp", throwIfNotFound: true);
        m__2Dsharp_Newaction = m__2Dsharp.FindAction("New action", throwIfNotFound: true);
        // 2E
        m__2E = asset.FindActionMap("2E", throwIfNotFound: true);
        m__2E_Newaction = m__2E.FindAction("New action", throwIfNotFound: true);
        // 2F
        m__2F = asset.FindActionMap("2F", throwIfNotFound: true);
        m__2F_Newaction = m__2F.FindAction("New action", throwIfNotFound: true);
        // 2Fsharp
        m__2Fsharp = asset.FindActionMap("2Fsharp", throwIfNotFound: true);
        m__2Fsharp_Newaction = m__2Fsharp.FindAction("New action", throwIfNotFound: true);
        // 2G
        m__2G = asset.FindActionMap("2G", throwIfNotFound: true);
        m__2G_Newaction = m__2G.FindAction("New action", throwIfNotFound: true);
        // 2Gsharp
        m__2Gsharp = asset.FindActionMap("2Gsharp", throwIfNotFound: true);
        m__2Gsharp_Newaction = m__2Gsharp.FindAction("New action", throwIfNotFound: true);
        // 2A
        m__2A = asset.FindActionMap("2A", throwIfNotFound: true);
        m__2A_Newaction = m__2A.FindAction("New action", throwIfNotFound: true);
        // 2Asharp
        m__2Asharp = asset.FindActionMap("2Asharp", throwIfNotFound: true);
        m__2Asharp_Newaction = m__2Asharp.FindAction("New action", throwIfNotFound: true);
        // 2B
        m__2B = asset.FindActionMap("2B", throwIfNotFound: true);
        m__2B_Newaction = m__2B.FindAction("New action", throwIfNotFound: true);
        // 3C
        m__3C = asset.FindActionMap("3C", throwIfNotFound: true);
        m__3C_Newaction = m__3C.FindAction("New action", throwIfNotFound: true);
        // 3Csharp
        m__3Csharp = asset.FindActionMap("3Csharp", throwIfNotFound: true);
        m__3Csharp_Newaction = m__3Csharp.FindAction("New action", throwIfNotFound: true);
        // 3D
        m__3D = asset.FindActionMap("3D", throwIfNotFound: true);
        m__3D_Newaction = m__3D.FindAction("New action", throwIfNotFound: true);
        // 3Dsharp
        m__3Dsharp = asset.FindActionMap("3Dsharp", throwIfNotFound: true);
        m__3Dsharp_Newaction = m__3Dsharp.FindAction("New action", throwIfNotFound: true);
        // 3E
        m__3E = asset.FindActionMap("3E", throwIfNotFound: true);
        m__3E_Newaction = m__3E.FindAction("New action", throwIfNotFound: true);
        // 3F
        m__3F = asset.FindActionMap("3F", throwIfNotFound: true);
        m__3F_Newaction = m__3F.FindAction("New action", throwIfNotFound: true);
        // 3Fsharp
        m__3Fsharp = asset.FindActionMap("3Fsharp", throwIfNotFound: true);
        m__3Fsharp_Newaction = m__3Fsharp.FindAction("New action", throwIfNotFound: true);
        // 3G
        m__3G = asset.FindActionMap("3G", throwIfNotFound: true);
        m__3G_Newaction = m__3G.FindAction("New action", throwIfNotFound: true);
        // 3Gsharp
        m__3Gsharp = asset.FindActionMap("3Gsharp", throwIfNotFound: true);
        m__3Gsharp_Newaction = m__3Gsharp.FindAction("New action", throwIfNotFound: true);
        // 3A
        m__3A = asset.FindActionMap("3A", throwIfNotFound: true);
        m__3A_Newaction = m__3A.FindAction("New action", throwIfNotFound: true);
        // 3Asharp
        m__3Asharp = asset.FindActionMap("3Asharp", throwIfNotFound: true);
        m__3Asharp_Newaction = m__3Asharp.FindAction("New action", throwIfNotFound: true);
        // 3B
        m__3B = asset.FindActionMap("3B", throwIfNotFound: true);
        m__3B_Newaction = m__3B.FindAction("New action", throwIfNotFound: true);
    }

    ~@KeyboardInput()
    {
        UnityEngine.Debug.Assert(!m__2C.enabled, "This will cause a leak and performance issues, KeyboardInput._2C.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2Csharp.enabled, "This will cause a leak and performance issues, KeyboardInput._2Csharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2D.enabled, "This will cause a leak and performance issues, KeyboardInput._2D.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2Dsharp.enabled, "This will cause a leak and performance issues, KeyboardInput._2Dsharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2E.enabled, "This will cause a leak and performance issues, KeyboardInput._2E.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2F.enabled, "This will cause a leak and performance issues, KeyboardInput._2F.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2Fsharp.enabled, "This will cause a leak and performance issues, KeyboardInput._2Fsharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2G.enabled, "This will cause a leak and performance issues, KeyboardInput._2G.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2Gsharp.enabled, "This will cause a leak and performance issues, KeyboardInput._2Gsharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2A.enabled, "This will cause a leak and performance issues, KeyboardInput._2A.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2Asharp.enabled, "This will cause a leak and performance issues, KeyboardInput._2Asharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__2B.enabled, "This will cause a leak and performance issues, KeyboardInput._2B.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3C.enabled, "This will cause a leak and performance issues, KeyboardInput._3C.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3Csharp.enabled, "This will cause a leak and performance issues, KeyboardInput._3Csharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3D.enabled, "This will cause a leak and performance issues, KeyboardInput._3D.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3Dsharp.enabled, "This will cause a leak and performance issues, KeyboardInput._3Dsharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3E.enabled, "This will cause a leak and performance issues, KeyboardInput._3E.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3F.enabled, "This will cause a leak and performance issues, KeyboardInput._3F.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3Fsharp.enabled, "This will cause a leak and performance issues, KeyboardInput._3Fsharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3G.enabled, "This will cause a leak and performance issues, KeyboardInput._3G.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3Gsharp.enabled, "This will cause a leak and performance issues, KeyboardInput._3Gsharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3A.enabled, "This will cause a leak and performance issues, KeyboardInput._3A.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3Asharp.enabled, "This will cause a leak and performance issues, KeyboardInput._3Asharp.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m__3B.enabled, "This will cause a leak and performance issues, KeyboardInput._3B.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 2C
    private readonly InputActionMap m__2C;
    private List<I_2CActions> m__2CActionsCallbackInterfaces = new List<I_2CActions>();
    private readonly InputAction m__2C_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2C".
    /// </summary>
    public struct _2CActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2CActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2C/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2C_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2C; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2CActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2CActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2CActions" />
        public void AddCallbacks(I_2CActions instance)
        {
            if (instance == null || m_Wrapper.m__2CActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2CActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2CActions" />
        private void UnregisterCallbacks(I_2CActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2CActions.UnregisterCallbacks(I_2CActions)" />.
        /// </summary>
        /// <seealso cref="_2CActions.UnregisterCallbacks(I_2CActions)" />
        public void RemoveCallbacks(I_2CActions instance)
        {
            if (m_Wrapper.m__2CActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2CActions.AddCallbacks(I_2CActions)" />
        /// <seealso cref="_2CActions.RemoveCallbacks(I_2CActions)" />
        /// <seealso cref="_2CActions.UnregisterCallbacks(I_2CActions)" />
        public void SetCallbacks(I_2CActions instance)
        {
            foreach (var item in m_Wrapper.m__2CActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2CActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2CActions" /> instance referencing this action map.
    /// </summary>
    public _2CActions @_2C => new _2CActions(this);

    // 2Csharp
    private readonly InputActionMap m__2Csharp;
    private List<I_2CsharpActions> m__2CsharpActionsCallbackInterfaces = new List<I_2CsharpActions>();
    private readonly InputAction m__2Csharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2Csharp".
    /// </summary>
    public struct _2CsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2CsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2Csharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2Csharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2Csharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2CsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2CsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2CsharpActions" />
        public void AddCallbacks(I_2CsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__2CsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2CsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2CsharpActions" />
        private void UnregisterCallbacks(I_2CsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2CsharpActions.UnregisterCallbacks(I_2CsharpActions)" />.
        /// </summary>
        /// <seealso cref="_2CsharpActions.UnregisterCallbacks(I_2CsharpActions)" />
        public void RemoveCallbacks(I_2CsharpActions instance)
        {
            if (m_Wrapper.m__2CsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2CsharpActions.AddCallbacks(I_2CsharpActions)" />
        /// <seealso cref="_2CsharpActions.RemoveCallbacks(I_2CsharpActions)" />
        /// <seealso cref="_2CsharpActions.UnregisterCallbacks(I_2CsharpActions)" />
        public void SetCallbacks(I_2CsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__2CsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2CsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2CsharpActions" /> instance referencing this action map.
    /// </summary>
    public _2CsharpActions @_2Csharp => new _2CsharpActions(this);

    // 2D
    private readonly InputActionMap m__2D;
    private List<I_2DActions> m__2DActionsCallbackInterfaces = new List<I_2DActions>();
    private readonly InputAction m__2D_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2D".
    /// </summary>
    public struct _2DActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2DActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2D/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2D_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2D; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2DActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2DActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2DActions" />
        public void AddCallbacks(I_2DActions instance)
        {
            if (instance == null || m_Wrapper.m__2DActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2DActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2DActions" />
        private void UnregisterCallbacks(I_2DActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2DActions.UnregisterCallbacks(I_2DActions)" />.
        /// </summary>
        /// <seealso cref="_2DActions.UnregisterCallbacks(I_2DActions)" />
        public void RemoveCallbacks(I_2DActions instance)
        {
            if (m_Wrapper.m__2DActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2DActions.AddCallbacks(I_2DActions)" />
        /// <seealso cref="_2DActions.RemoveCallbacks(I_2DActions)" />
        /// <seealso cref="_2DActions.UnregisterCallbacks(I_2DActions)" />
        public void SetCallbacks(I_2DActions instance)
        {
            foreach (var item in m_Wrapper.m__2DActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2DActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2DActions" /> instance referencing this action map.
    /// </summary>
    public _2DActions @_2D => new _2DActions(this);

    // 2Dsharp
    private readonly InputActionMap m__2Dsharp;
    private List<I_2DsharpActions> m__2DsharpActionsCallbackInterfaces = new List<I_2DsharpActions>();
    private readonly InputAction m__2Dsharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2Dsharp".
    /// </summary>
    public struct _2DsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2DsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2Dsharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2Dsharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2Dsharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2DsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2DsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2DsharpActions" />
        public void AddCallbacks(I_2DsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__2DsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2DsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2DsharpActions" />
        private void UnregisterCallbacks(I_2DsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2DsharpActions.UnregisterCallbacks(I_2DsharpActions)" />.
        /// </summary>
        /// <seealso cref="_2DsharpActions.UnregisterCallbacks(I_2DsharpActions)" />
        public void RemoveCallbacks(I_2DsharpActions instance)
        {
            if (m_Wrapper.m__2DsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2DsharpActions.AddCallbacks(I_2DsharpActions)" />
        /// <seealso cref="_2DsharpActions.RemoveCallbacks(I_2DsharpActions)" />
        /// <seealso cref="_2DsharpActions.UnregisterCallbacks(I_2DsharpActions)" />
        public void SetCallbacks(I_2DsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__2DsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2DsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2DsharpActions" /> instance referencing this action map.
    /// </summary>
    public _2DsharpActions @_2Dsharp => new _2DsharpActions(this);

    // 2E
    private readonly InputActionMap m__2E;
    private List<I_2EActions> m__2EActionsCallbackInterfaces = new List<I_2EActions>();
    private readonly InputAction m__2E_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2E".
    /// </summary>
    public struct _2EActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2EActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2E/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2E_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2E; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2EActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2EActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2EActions" />
        public void AddCallbacks(I_2EActions instance)
        {
            if (instance == null || m_Wrapper.m__2EActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2EActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2EActions" />
        private void UnregisterCallbacks(I_2EActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2EActions.UnregisterCallbacks(I_2EActions)" />.
        /// </summary>
        /// <seealso cref="_2EActions.UnregisterCallbacks(I_2EActions)" />
        public void RemoveCallbacks(I_2EActions instance)
        {
            if (m_Wrapper.m__2EActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2EActions.AddCallbacks(I_2EActions)" />
        /// <seealso cref="_2EActions.RemoveCallbacks(I_2EActions)" />
        /// <seealso cref="_2EActions.UnregisterCallbacks(I_2EActions)" />
        public void SetCallbacks(I_2EActions instance)
        {
            foreach (var item in m_Wrapper.m__2EActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2EActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2EActions" /> instance referencing this action map.
    /// </summary>
    public _2EActions @_2E => new _2EActions(this);

    // 2F
    private readonly InputActionMap m__2F;
    private List<I_2FActions> m__2FActionsCallbackInterfaces = new List<I_2FActions>();
    private readonly InputAction m__2F_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2F".
    /// </summary>
    public struct _2FActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2FActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2F/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2F_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2F; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2FActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2FActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2FActions" />
        public void AddCallbacks(I_2FActions instance)
        {
            if (instance == null || m_Wrapper.m__2FActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2FActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2FActions" />
        private void UnregisterCallbacks(I_2FActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2FActions.UnregisterCallbacks(I_2FActions)" />.
        /// </summary>
        /// <seealso cref="_2FActions.UnregisterCallbacks(I_2FActions)" />
        public void RemoveCallbacks(I_2FActions instance)
        {
            if (m_Wrapper.m__2FActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2FActions.AddCallbacks(I_2FActions)" />
        /// <seealso cref="_2FActions.RemoveCallbacks(I_2FActions)" />
        /// <seealso cref="_2FActions.UnregisterCallbacks(I_2FActions)" />
        public void SetCallbacks(I_2FActions instance)
        {
            foreach (var item in m_Wrapper.m__2FActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2FActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2FActions" /> instance referencing this action map.
    /// </summary>
    public _2FActions @_2F => new _2FActions(this);

    // 2Fsharp
    private readonly InputActionMap m__2Fsharp;
    private List<I_2FsharpActions> m__2FsharpActionsCallbackInterfaces = new List<I_2FsharpActions>();
    private readonly InputAction m__2Fsharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2Fsharp".
    /// </summary>
    public struct _2FsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2FsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2Fsharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2Fsharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2Fsharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2FsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2FsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2FsharpActions" />
        public void AddCallbacks(I_2FsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__2FsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2FsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2FsharpActions" />
        private void UnregisterCallbacks(I_2FsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2FsharpActions.UnregisterCallbacks(I_2FsharpActions)" />.
        /// </summary>
        /// <seealso cref="_2FsharpActions.UnregisterCallbacks(I_2FsharpActions)" />
        public void RemoveCallbacks(I_2FsharpActions instance)
        {
            if (m_Wrapper.m__2FsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2FsharpActions.AddCallbacks(I_2FsharpActions)" />
        /// <seealso cref="_2FsharpActions.RemoveCallbacks(I_2FsharpActions)" />
        /// <seealso cref="_2FsharpActions.UnregisterCallbacks(I_2FsharpActions)" />
        public void SetCallbacks(I_2FsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__2FsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2FsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2FsharpActions" /> instance referencing this action map.
    /// </summary>
    public _2FsharpActions @_2Fsharp => new _2FsharpActions(this);

    // 2G
    private readonly InputActionMap m__2G;
    private List<I_2GActions> m__2GActionsCallbackInterfaces = new List<I_2GActions>();
    private readonly InputAction m__2G_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2G".
    /// </summary>
    public struct _2GActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2GActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2G/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2G_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2G; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2GActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2GActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2GActions" />
        public void AddCallbacks(I_2GActions instance)
        {
            if (instance == null || m_Wrapper.m__2GActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2GActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2GActions" />
        private void UnregisterCallbacks(I_2GActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2GActions.UnregisterCallbacks(I_2GActions)" />.
        /// </summary>
        /// <seealso cref="_2GActions.UnregisterCallbacks(I_2GActions)" />
        public void RemoveCallbacks(I_2GActions instance)
        {
            if (m_Wrapper.m__2GActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2GActions.AddCallbacks(I_2GActions)" />
        /// <seealso cref="_2GActions.RemoveCallbacks(I_2GActions)" />
        /// <seealso cref="_2GActions.UnregisterCallbacks(I_2GActions)" />
        public void SetCallbacks(I_2GActions instance)
        {
            foreach (var item in m_Wrapper.m__2GActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2GActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2GActions" /> instance referencing this action map.
    /// </summary>
    public _2GActions @_2G => new _2GActions(this);

    // 2Gsharp
    private readonly InputActionMap m__2Gsharp;
    private List<I_2GsharpActions> m__2GsharpActionsCallbackInterfaces = new List<I_2GsharpActions>();
    private readonly InputAction m__2Gsharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2Gsharp".
    /// </summary>
    public struct _2GsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2GsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2Gsharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2Gsharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2Gsharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2GsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2GsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2GsharpActions" />
        public void AddCallbacks(I_2GsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__2GsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2GsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2GsharpActions" />
        private void UnregisterCallbacks(I_2GsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2GsharpActions.UnregisterCallbacks(I_2GsharpActions)" />.
        /// </summary>
        /// <seealso cref="_2GsharpActions.UnregisterCallbacks(I_2GsharpActions)" />
        public void RemoveCallbacks(I_2GsharpActions instance)
        {
            if (m_Wrapper.m__2GsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2GsharpActions.AddCallbacks(I_2GsharpActions)" />
        /// <seealso cref="_2GsharpActions.RemoveCallbacks(I_2GsharpActions)" />
        /// <seealso cref="_2GsharpActions.UnregisterCallbacks(I_2GsharpActions)" />
        public void SetCallbacks(I_2GsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__2GsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2GsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2GsharpActions" /> instance referencing this action map.
    /// </summary>
    public _2GsharpActions @_2Gsharp => new _2GsharpActions(this);

    // 2A
    private readonly InputActionMap m__2A;
    private List<I_2AActions> m__2AActionsCallbackInterfaces = new List<I_2AActions>();
    private readonly InputAction m__2A_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2A".
    /// </summary>
    public struct _2AActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2AActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2A/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2A_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2A; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2AActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2AActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2AActions" />
        public void AddCallbacks(I_2AActions instance)
        {
            if (instance == null || m_Wrapper.m__2AActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2AActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2AActions" />
        private void UnregisterCallbacks(I_2AActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2AActions.UnregisterCallbacks(I_2AActions)" />.
        /// </summary>
        /// <seealso cref="_2AActions.UnregisterCallbacks(I_2AActions)" />
        public void RemoveCallbacks(I_2AActions instance)
        {
            if (m_Wrapper.m__2AActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2AActions.AddCallbacks(I_2AActions)" />
        /// <seealso cref="_2AActions.RemoveCallbacks(I_2AActions)" />
        /// <seealso cref="_2AActions.UnregisterCallbacks(I_2AActions)" />
        public void SetCallbacks(I_2AActions instance)
        {
            foreach (var item in m_Wrapper.m__2AActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2AActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2AActions" /> instance referencing this action map.
    /// </summary>
    public _2AActions @_2A => new _2AActions(this);

    // 2Asharp
    private readonly InputActionMap m__2Asharp;
    private List<I_2AsharpActions> m__2AsharpActionsCallbackInterfaces = new List<I_2AsharpActions>();
    private readonly InputAction m__2Asharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2Asharp".
    /// </summary>
    public struct _2AsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2AsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2Asharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2Asharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2Asharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2AsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2AsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2AsharpActions" />
        public void AddCallbacks(I_2AsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__2AsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2AsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2AsharpActions" />
        private void UnregisterCallbacks(I_2AsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2AsharpActions.UnregisterCallbacks(I_2AsharpActions)" />.
        /// </summary>
        /// <seealso cref="_2AsharpActions.UnregisterCallbacks(I_2AsharpActions)" />
        public void RemoveCallbacks(I_2AsharpActions instance)
        {
            if (m_Wrapper.m__2AsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2AsharpActions.AddCallbacks(I_2AsharpActions)" />
        /// <seealso cref="_2AsharpActions.RemoveCallbacks(I_2AsharpActions)" />
        /// <seealso cref="_2AsharpActions.UnregisterCallbacks(I_2AsharpActions)" />
        public void SetCallbacks(I_2AsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__2AsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2AsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2AsharpActions" /> instance referencing this action map.
    /// </summary>
    public _2AsharpActions @_2Asharp => new _2AsharpActions(this);

    // 2B
    private readonly InputActionMap m__2B;
    private List<I_2BActions> m__2BActionsCallbackInterfaces = new List<I_2BActions>();
    private readonly InputAction m__2B_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "2B".
    /// </summary>
    public struct _2BActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _2BActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_2B/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__2B_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__2B; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_2BActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_2BActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_2BActions" />
        public void AddCallbacks(I_2BActions instance)
        {
            if (instance == null || m_Wrapper.m__2BActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__2BActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_2BActions" />
        private void UnregisterCallbacks(I_2BActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_2BActions.UnregisterCallbacks(I_2BActions)" />.
        /// </summary>
        /// <seealso cref="_2BActions.UnregisterCallbacks(I_2BActions)" />
        public void RemoveCallbacks(I_2BActions instance)
        {
            if (m_Wrapper.m__2BActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_2BActions.AddCallbacks(I_2BActions)" />
        /// <seealso cref="_2BActions.RemoveCallbacks(I_2BActions)" />
        /// <seealso cref="_2BActions.UnregisterCallbacks(I_2BActions)" />
        public void SetCallbacks(I_2BActions instance)
        {
            foreach (var item in m_Wrapper.m__2BActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__2BActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_2BActions" /> instance referencing this action map.
    /// </summary>
    public _2BActions @_2B => new _2BActions(this);

    // 3C
    private readonly InputActionMap m__3C;
    private List<I_3CActions> m__3CActionsCallbackInterfaces = new List<I_3CActions>();
    private readonly InputAction m__3C_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3C".
    /// </summary>
    public struct _3CActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3CActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3C/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3C_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3C; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3CActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3CActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3CActions" />
        public void AddCallbacks(I_3CActions instance)
        {
            if (instance == null || m_Wrapper.m__3CActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3CActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3CActions" />
        private void UnregisterCallbacks(I_3CActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3CActions.UnregisterCallbacks(I_3CActions)" />.
        /// </summary>
        /// <seealso cref="_3CActions.UnregisterCallbacks(I_3CActions)" />
        public void RemoveCallbacks(I_3CActions instance)
        {
            if (m_Wrapper.m__3CActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3CActions.AddCallbacks(I_3CActions)" />
        /// <seealso cref="_3CActions.RemoveCallbacks(I_3CActions)" />
        /// <seealso cref="_3CActions.UnregisterCallbacks(I_3CActions)" />
        public void SetCallbacks(I_3CActions instance)
        {
            foreach (var item in m_Wrapper.m__3CActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3CActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3CActions" /> instance referencing this action map.
    /// </summary>
    public _3CActions @_3C => new _3CActions(this);

    // 3Csharp
    private readonly InputActionMap m__3Csharp;
    private List<I_3CsharpActions> m__3CsharpActionsCallbackInterfaces = new List<I_3CsharpActions>();
    private readonly InputAction m__3Csharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3Csharp".
    /// </summary>
    public struct _3CsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3CsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3Csharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3Csharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3Csharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3CsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3CsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3CsharpActions" />
        public void AddCallbacks(I_3CsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__3CsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3CsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3CsharpActions" />
        private void UnregisterCallbacks(I_3CsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3CsharpActions.UnregisterCallbacks(I_3CsharpActions)" />.
        /// </summary>
        /// <seealso cref="_3CsharpActions.UnregisterCallbacks(I_3CsharpActions)" />
        public void RemoveCallbacks(I_3CsharpActions instance)
        {
            if (m_Wrapper.m__3CsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3CsharpActions.AddCallbacks(I_3CsharpActions)" />
        /// <seealso cref="_3CsharpActions.RemoveCallbacks(I_3CsharpActions)" />
        /// <seealso cref="_3CsharpActions.UnregisterCallbacks(I_3CsharpActions)" />
        public void SetCallbacks(I_3CsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__3CsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3CsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3CsharpActions" /> instance referencing this action map.
    /// </summary>
    public _3CsharpActions @_3Csharp => new _3CsharpActions(this);

    // 3D
    private readonly InputActionMap m__3D;
    private List<I_3DActions> m__3DActionsCallbackInterfaces = new List<I_3DActions>();
    private readonly InputAction m__3D_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3D".
    /// </summary>
    public struct _3DActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3DActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3D/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3D_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3D; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3DActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3DActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3DActions" />
        public void AddCallbacks(I_3DActions instance)
        {
            if (instance == null || m_Wrapper.m__3DActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3DActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3DActions" />
        private void UnregisterCallbacks(I_3DActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3DActions.UnregisterCallbacks(I_3DActions)" />.
        /// </summary>
        /// <seealso cref="_3DActions.UnregisterCallbacks(I_3DActions)" />
        public void RemoveCallbacks(I_3DActions instance)
        {
            if (m_Wrapper.m__3DActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3DActions.AddCallbacks(I_3DActions)" />
        /// <seealso cref="_3DActions.RemoveCallbacks(I_3DActions)" />
        /// <seealso cref="_3DActions.UnregisterCallbacks(I_3DActions)" />
        public void SetCallbacks(I_3DActions instance)
        {
            foreach (var item in m_Wrapper.m__3DActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3DActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3DActions" /> instance referencing this action map.
    /// </summary>
    public _3DActions @_3D => new _3DActions(this);

    // 3Dsharp
    private readonly InputActionMap m__3Dsharp;
    private List<I_3DsharpActions> m__3DsharpActionsCallbackInterfaces = new List<I_3DsharpActions>();
    private readonly InputAction m__3Dsharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3Dsharp".
    /// </summary>
    public struct _3DsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3DsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3Dsharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3Dsharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3Dsharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3DsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3DsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3DsharpActions" />
        public void AddCallbacks(I_3DsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__3DsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3DsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3DsharpActions" />
        private void UnregisterCallbacks(I_3DsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3DsharpActions.UnregisterCallbacks(I_3DsharpActions)" />.
        /// </summary>
        /// <seealso cref="_3DsharpActions.UnregisterCallbacks(I_3DsharpActions)" />
        public void RemoveCallbacks(I_3DsharpActions instance)
        {
            if (m_Wrapper.m__3DsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3DsharpActions.AddCallbacks(I_3DsharpActions)" />
        /// <seealso cref="_3DsharpActions.RemoveCallbacks(I_3DsharpActions)" />
        /// <seealso cref="_3DsharpActions.UnregisterCallbacks(I_3DsharpActions)" />
        public void SetCallbacks(I_3DsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__3DsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3DsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3DsharpActions" /> instance referencing this action map.
    /// </summary>
    public _3DsharpActions @_3Dsharp => new _3DsharpActions(this);

    // 3E
    private readonly InputActionMap m__3E;
    private List<I_3EActions> m__3EActionsCallbackInterfaces = new List<I_3EActions>();
    private readonly InputAction m__3E_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3E".
    /// </summary>
    public struct _3EActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3EActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3E/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3E_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3E; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3EActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3EActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3EActions" />
        public void AddCallbacks(I_3EActions instance)
        {
            if (instance == null || m_Wrapper.m__3EActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3EActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3EActions" />
        private void UnregisterCallbacks(I_3EActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3EActions.UnregisterCallbacks(I_3EActions)" />.
        /// </summary>
        /// <seealso cref="_3EActions.UnregisterCallbacks(I_3EActions)" />
        public void RemoveCallbacks(I_3EActions instance)
        {
            if (m_Wrapper.m__3EActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3EActions.AddCallbacks(I_3EActions)" />
        /// <seealso cref="_3EActions.RemoveCallbacks(I_3EActions)" />
        /// <seealso cref="_3EActions.UnregisterCallbacks(I_3EActions)" />
        public void SetCallbacks(I_3EActions instance)
        {
            foreach (var item in m_Wrapper.m__3EActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3EActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3EActions" /> instance referencing this action map.
    /// </summary>
    public _3EActions @_3E => new _3EActions(this);

    // 3F
    private readonly InputActionMap m__3F;
    private List<I_3FActions> m__3FActionsCallbackInterfaces = new List<I_3FActions>();
    private readonly InputAction m__3F_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3F".
    /// </summary>
    public struct _3FActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3FActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3F/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3F_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3F; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3FActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3FActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3FActions" />
        public void AddCallbacks(I_3FActions instance)
        {
            if (instance == null || m_Wrapper.m__3FActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3FActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3FActions" />
        private void UnregisterCallbacks(I_3FActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3FActions.UnregisterCallbacks(I_3FActions)" />.
        /// </summary>
        /// <seealso cref="_3FActions.UnregisterCallbacks(I_3FActions)" />
        public void RemoveCallbacks(I_3FActions instance)
        {
            if (m_Wrapper.m__3FActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3FActions.AddCallbacks(I_3FActions)" />
        /// <seealso cref="_3FActions.RemoveCallbacks(I_3FActions)" />
        /// <seealso cref="_3FActions.UnregisterCallbacks(I_3FActions)" />
        public void SetCallbacks(I_3FActions instance)
        {
            foreach (var item in m_Wrapper.m__3FActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3FActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3FActions" /> instance referencing this action map.
    /// </summary>
    public _3FActions @_3F => new _3FActions(this);

    // 3Fsharp
    private readonly InputActionMap m__3Fsharp;
    private List<I_3FsharpActions> m__3FsharpActionsCallbackInterfaces = new List<I_3FsharpActions>();
    private readonly InputAction m__3Fsharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3Fsharp".
    /// </summary>
    public struct _3FsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3FsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3Fsharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3Fsharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3Fsharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3FsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3FsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3FsharpActions" />
        public void AddCallbacks(I_3FsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__3FsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3FsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3FsharpActions" />
        private void UnregisterCallbacks(I_3FsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3FsharpActions.UnregisterCallbacks(I_3FsharpActions)" />.
        /// </summary>
        /// <seealso cref="_3FsharpActions.UnregisterCallbacks(I_3FsharpActions)" />
        public void RemoveCallbacks(I_3FsharpActions instance)
        {
            if (m_Wrapper.m__3FsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3FsharpActions.AddCallbacks(I_3FsharpActions)" />
        /// <seealso cref="_3FsharpActions.RemoveCallbacks(I_3FsharpActions)" />
        /// <seealso cref="_3FsharpActions.UnregisterCallbacks(I_3FsharpActions)" />
        public void SetCallbacks(I_3FsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__3FsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3FsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3FsharpActions" /> instance referencing this action map.
    /// </summary>
    public _3FsharpActions @_3Fsharp => new _3FsharpActions(this);

    // 3G
    private readonly InputActionMap m__3G;
    private List<I_3GActions> m__3GActionsCallbackInterfaces = new List<I_3GActions>();
    private readonly InputAction m__3G_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3G".
    /// </summary>
    public struct _3GActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3GActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3G/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3G_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3G; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3GActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3GActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3GActions" />
        public void AddCallbacks(I_3GActions instance)
        {
            if (instance == null || m_Wrapper.m__3GActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3GActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3GActions" />
        private void UnregisterCallbacks(I_3GActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3GActions.UnregisterCallbacks(I_3GActions)" />.
        /// </summary>
        /// <seealso cref="_3GActions.UnregisterCallbacks(I_3GActions)" />
        public void RemoveCallbacks(I_3GActions instance)
        {
            if (m_Wrapper.m__3GActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3GActions.AddCallbacks(I_3GActions)" />
        /// <seealso cref="_3GActions.RemoveCallbacks(I_3GActions)" />
        /// <seealso cref="_3GActions.UnregisterCallbacks(I_3GActions)" />
        public void SetCallbacks(I_3GActions instance)
        {
            foreach (var item in m_Wrapper.m__3GActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3GActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3GActions" /> instance referencing this action map.
    /// </summary>
    public _3GActions @_3G => new _3GActions(this);

    // 3Gsharp
    private readonly InputActionMap m__3Gsharp;
    private List<I_3GsharpActions> m__3GsharpActionsCallbackInterfaces = new List<I_3GsharpActions>();
    private readonly InputAction m__3Gsharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3Gsharp".
    /// </summary>
    public struct _3GsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3GsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3Gsharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3Gsharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3Gsharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3GsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3GsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3GsharpActions" />
        public void AddCallbacks(I_3GsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__3GsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3GsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3GsharpActions" />
        private void UnregisterCallbacks(I_3GsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3GsharpActions.UnregisterCallbacks(I_3GsharpActions)" />.
        /// </summary>
        /// <seealso cref="_3GsharpActions.UnregisterCallbacks(I_3GsharpActions)" />
        public void RemoveCallbacks(I_3GsharpActions instance)
        {
            if (m_Wrapper.m__3GsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3GsharpActions.AddCallbacks(I_3GsharpActions)" />
        /// <seealso cref="_3GsharpActions.RemoveCallbacks(I_3GsharpActions)" />
        /// <seealso cref="_3GsharpActions.UnregisterCallbacks(I_3GsharpActions)" />
        public void SetCallbacks(I_3GsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__3GsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3GsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3GsharpActions" /> instance referencing this action map.
    /// </summary>
    public _3GsharpActions @_3Gsharp => new _3GsharpActions(this);

    // 3A
    private readonly InputActionMap m__3A;
    private List<I_3AActions> m__3AActionsCallbackInterfaces = new List<I_3AActions>();
    private readonly InputAction m__3A_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3A".
    /// </summary>
    public struct _3AActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3AActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3A/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3A_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3A; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3AActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3AActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3AActions" />
        public void AddCallbacks(I_3AActions instance)
        {
            if (instance == null || m_Wrapper.m__3AActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3AActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3AActions" />
        private void UnregisterCallbacks(I_3AActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3AActions.UnregisterCallbacks(I_3AActions)" />.
        /// </summary>
        /// <seealso cref="_3AActions.UnregisterCallbacks(I_3AActions)" />
        public void RemoveCallbacks(I_3AActions instance)
        {
            if (m_Wrapper.m__3AActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3AActions.AddCallbacks(I_3AActions)" />
        /// <seealso cref="_3AActions.RemoveCallbacks(I_3AActions)" />
        /// <seealso cref="_3AActions.UnregisterCallbacks(I_3AActions)" />
        public void SetCallbacks(I_3AActions instance)
        {
            foreach (var item in m_Wrapper.m__3AActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3AActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3AActions" /> instance referencing this action map.
    /// </summary>
    public _3AActions @_3A => new _3AActions(this);

    // 3Asharp
    private readonly InputActionMap m__3Asharp;
    private List<I_3AsharpActions> m__3AsharpActionsCallbackInterfaces = new List<I_3AsharpActions>();
    private readonly InputAction m__3Asharp_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3Asharp".
    /// </summary>
    public struct _3AsharpActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3AsharpActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3Asharp/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3Asharp_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3Asharp; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3AsharpActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3AsharpActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3AsharpActions" />
        public void AddCallbacks(I_3AsharpActions instance)
        {
            if (instance == null || m_Wrapper.m__3AsharpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3AsharpActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3AsharpActions" />
        private void UnregisterCallbacks(I_3AsharpActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3AsharpActions.UnregisterCallbacks(I_3AsharpActions)" />.
        /// </summary>
        /// <seealso cref="_3AsharpActions.UnregisterCallbacks(I_3AsharpActions)" />
        public void RemoveCallbacks(I_3AsharpActions instance)
        {
            if (m_Wrapper.m__3AsharpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3AsharpActions.AddCallbacks(I_3AsharpActions)" />
        /// <seealso cref="_3AsharpActions.RemoveCallbacks(I_3AsharpActions)" />
        /// <seealso cref="_3AsharpActions.UnregisterCallbacks(I_3AsharpActions)" />
        public void SetCallbacks(I_3AsharpActions instance)
        {
            foreach (var item in m_Wrapper.m__3AsharpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3AsharpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3AsharpActions" /> instance referencing this action map.
    /// </summary>
    public _3AsharpActions @_3Asharp => new _3AsharpActions(this);

    // 3B
    private readonly InputActionMap m__3B;
    private List<I_3BActions> m__3BActionsCallbackInterfaces = new List<I_3BActions>();
    private readonly InputAction m__3B_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "3B".
    /// </summary>
    public struct _3BActions
    {
        private @KeyboardInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public _3BActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "_3B/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m__3B_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m__3B; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="_3BActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(_3BActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="_3BActions" />
        public void AddCallbacks(I_3BActions instance)
        {
            if (instance == null || m_Wrapper.m__3BActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__3BActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="_3BActions" />
        private void UnregisterCallbacks(I_3BActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="_3BActions.UnregisterCallbacks(I_3BActions)" />.
        /// </summary>
        /// <seealso cref="_3BActions.UnregisterCallbacks(I_3BActions)" />
        public void RemoveCallbacks(I_3BActions instance)
        {
            if (m_Wrapper.m__3BActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="_3BActions.AddCallbacks(I_3BActions)" />
        /// <seealso cref="_3BActions.RemoveCallbacks(I_3BActions)" />
        /// <seealso cref="_3BActions.UnregisterCallbacks(I_3BActions)" />
        public void SetCallbacks(I_3BActions instance)
        {
            foreach (var item in m_Wrapper.m__3BActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__3BActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="_3BActions" /> instance referencing this action map.
    /// </summary>
    public _3BActions @_3B => new _3BActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2C" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2CActions.AddCallbacks(I_2CActions)" />
    /// <seealso cref="_2CActions.RemoveCallbacks(I_2CActions)" />
    public interface I_2CActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2Csharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2CsharpActions.AddCallbacks(I_2CsharpActions)" />
    /// <seealso cref="_2CsharpActions.RemoveCallbacks(I_2CsharpActions)" />
    public interface I_2CsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2D" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2DActions.AddCallbacks(I_2DActions)" />
    /// <seealso cref="_2DActions.RemoveCallbacks(I_2DActions)" />
    public interface I_2DActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2Dsharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2DsharpActions.AddCallbacks(I_2DsharpActions)" />
    /// <seealso cref="_2DsharpActions.RemoveCallbacks(I_2DsharpActions)" />
    public interface I_2DsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2E" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2EActions.AddCallbacks(I_2EActions)" />
    /// <seealso cref="_2EActions.RemoveCallbacks(I_2EActions)" />
    public interface I_2EActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2F" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2FActions.AddCallbacks(I_2FActions)" />
    /// <seealso cref="_2FActions.RemoveCallbacks(I_2FActions)" />
    public interface I_2FActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2Fsharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2FsharpActions.AddCallbacks(I_2FsharpActions)" />
    /// <seealso cref="_2FsharpActions.RemoveCallbacks(I_2FsharpActions)" />
    public interface I_2FsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2G" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2GActions.AddCallbacks(I_2GActions)" />
    /// <seealso cref="_2GActions.RemoveCallbacks(I_2GActions)" />
    public interface I_2GActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2Gsharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2GsharpActions.AddCallbacks(I_2GsharpActions)" />
    /// <seealso cref="_2GsharpActions.RemoveCallbacks(I_2GsharpActions)" />
    public interface I_2GsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2A" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2AActions.AddCallbacks(I_2AActions)" />
    /// <seealso cref="_2AActions.RemoveCallbacks(I_2AActions)" />
    public interface I_2AActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2Asharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2AsharpActions.AddCallbacks(I_2AsharpActions)" />
    /// <seealso cref="_2AsharpActions.RemoveCallbacks(I_2AsharpActions)" />
    public interface I_2AsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "2B" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_2BActions.AddCallbacks(I_2BActions)" />
    /// <seealso cref="_2BActions.RemoveCallbacks(I_2BActions)" />
    public interface I_2BActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3C" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3CActions.AddCallbacks(I_3CActions)" />
    /// <seealso cref="_3CActions.RemoveCallbacks(I_3CActions)" />
    public interface I_3CActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3Csharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3CsharpActions.AddCallbacks(I_3CsharpActions)" />
    /// <seealso cref="_3CsharpActions.RemoveCallbacks(I_3CsharpActions)" />
    public interface I_3CsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3D" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3DActions.AddCallbacks(I_3DActions)" />
    /// <seealso cref="_3DActions.RemoveCallbacks(I_3DActions)" />
    public interface I_3DActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3Dsharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3DsharpActions.AddCallbacks(I_3DsharpActions)" />
    /// <seealso cref="_3DsharpActions.RemoveCallbacks(I_3DsharpActions)" />
    public interface I_3DsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3E" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3EActions.AddCallbacks(I_3EActions)" />
    /// <seealso cref="_3EActions.RemoveCallbacks(I_3EActions)" />
    public interface I_3EActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3F" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3FActions.AddCallbacks(I_3FActions)" />
    /// <seealso cref="_3FActions.RemoveCallbacks(I_3FActions)" />
    public interface I_3FActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3Fsharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3FsharpActions.AddCallbacks(I_3FsharpActions)" />
    /// <seealso cref="_3FsharpActions.RemoveCallbacks(I_3FsharpActions)" />
    public interface I_3FsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3G" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3GActions.AddCallbacks(I_3GActions)" />
    /// <seealso cref="_3GActions.RemoveCallbacks(I_3GActions)" />
    public interface I_3GActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3Gsharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3GsharpActions.AddCallbacks(I_3GsharpActions)" />
    /// <seealso cref="_3GsharpActions.RemoveCallbacks(I_3GsharpActions)" />
    public interface I_3GsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3A" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3AActions.AddCallbacks(I_3AActions)" />
    /// <seealso cref="_3AActions.RemoveCallbacks(I_3AActions)" />
    public interface I_3AActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3Asharp" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3AsharpActions.AddCallbacks(I_3AsharpActions)" />
    /// <seealso cref="_3AsharpActions.RemoveCallbacks(I_3AsharpActions)" />
    public interface I_3AsharpActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "3B" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="_3BActions.AddCallbacks(I_3BActions)" />
    /// <seealso cref="_3BActions.RemoveCallbacks(I_3BActions)" />
    public interface I_3BActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
}
